{
  "openapi": "3.0.1",
  "info": {
    "title": "Firecracker API",
    "description": "RESTful public-facing API. The API is accessible through HTTP calls on specific URLs carrying JSON modeled data. The transport medium is a Unix Domain Socket.",
    "termsOfService": "",
    "contact": {
      "email": "compute-capsule@amazon.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "0.25.0"
  },
  "servers": [
    {
      "url": "http://localhost/"
    }
  ],
  "paths": {
    "/": {
      "get": {
        "summary": "Returns general information about an instance.",
        "operationId": "describeInstance",
        "responses": {
          "200": {
            "description": "The instance information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstanceInfo"
                }
              }
            }
          },
          "default": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/actions": {
      "put": {
        "summary": "Creates a synchronous action.",
        "operationId": "createSyncAction",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InstanceActionInfo"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "The update was successful",
            "content": {}
          },
          "400": {
            "description": "The action cannot be executed due to bad input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "info"
      }
    },
    "/balloon": {
      "get": {
        "summary": "Returns the current balloon device configuration.",
        "operationId": "describeBalloonConfig",
        "responses": {
          "200": {
            "description": "The balloon device configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Balloon"
                }
              }
            }
          },
          "400": {
            "description": "Balloon device not configured.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Creates or updates a balloon device.",
        "description": "Creates a new balloon device if one does not already exist, otherwise updates it, before machine startup. This will fail after machine startup. Will fail if update is not possible.",
        "operationId": "putBalloon",
        "requestBody": {
          "description": "Balloon properties",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Balloon"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Balloon device created/updated",
            "content": {}
          },
          "400": {
            "description": "Balloon device cannot be created/updated due to bad input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "patch": {
        "summary": "Updates a balloon device.",
        "description": "Updates an existing balloon device, before or after machine startup. Will fail if update is not possible.",
        "operationId": "patchBalloon",
        "requestBody": {
          "description": "Balloon properties",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BalloonUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Balloon device updated",
            "content": {}
          },
          "400": {
            "description": "Balloon device cannot be updated due to bad input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/balloon/statistics": {
      "get": {
        "summary": "Returns the latest balloon device statistics, only if enabled pre-boot.",
        "operationId": "describeBalloonStats",
        "responses": {
          "200": {
            "description": "The balloon device statistics",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BalloonStats"
                }
              }
            }
          },
          "400": {
            "description": "The balloon device statistics were not enabled when the device was configured.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Updates a balloon device statistics polling interval.",
        "description": "Updates an existing balloon device statistics interval, before or after machine startup. Will fail if update is not possible.",
        "operationId": "patchBalloonStatsInterval",
        "requestBody": {
          "description": "Balloon properties",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BalloonStatsUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Balloon statistics interval updated",
            "content": {}
          },
          "400": {
            "description": "Balloon statistics interval cannot be updated due to bad input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/boot-source": {
      "put": {
        "summary": "Creates or updates the boot source. Pre-boot only.",
        "description": "Creates new boot source if one does not already exist, otherwise updates it. Will fail if update is not possible.",
        "operationId": "putGuestBootSource",
        "requestBody": {
          "description": "Guest boot source properties",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BootSource"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Boot source created/updated",
            "content": {}
          },
          "400": {
            "description": "Boot source cannot be created due to bad input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/drives/{drive_id}": {
      "put": {
        "summary": "Creates or updates a drive. Pre-boot only.",
        "description": "Creates new drive with ID specified by drive_id path parameter. If a drive with the specified ID already exists, updates its state based on new input. Will fail if update is not possible.",
        "operationId": "putGuestDriveByID",
        "parameters": [
          {
            "name": "drive_id",
            "in": "path",
            "description": "The id of the guest drive",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Guest drive properties",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Drive"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Drive created/updated",
            "content": {}
          },
          "400": {
            "description": "Drive cannot be created/updated due to bad input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "patch": {
        "summary": "Updates the properties of a drive. Post-boot only.",
        "description": "Updates the properties of the drive with the ID specified by drive_id path parameter. Will fail if update is not possible.",
        "operationId": "patchGuestDriveByID",
        "parameters": [
          {
            "name": "drive_id",
            "in": "path",
            "description": "The id of the guest drive",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Guest drive properties",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartialDrive"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Drive updated",
            "content": {}
          },
          "400": {
            "description": "Drive cannot be updated due to bad input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/logger": {
      "put": {
        "summary": "Initializes the logger by specifying a named pipe or a file for the logs output.",
        "operationId": "putLogger",
        "requestBody": {
          "description": "Logging system description",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Logger"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Logger created.",
            "content": {}
          },
          "400": {
            "description": "Logger cannot be initialized due to bad input.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/machine-config": {
      "get": {
        "summary": "Gets the machine configuration of the VM.",
        "description": "Gets the machine configuration of the VM. When called before the PUT operation, it will return the default values for the vCPU count (=1), memory size (=128 MiB). By default Hyperthreading is disabled and there is no CPU Template.",
        "operationId": "getMachineConfiguration",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MachineConfiguration"
                }
              }
            }
          },
          "default": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Updates the Machine Configuration of the VM. Pre-boot only.",
        "description": "Updates the Virtual Machine Configuration with the specified input. Firecracker starts with default values for vCPU count (=1) and memory size (=128 MiB). With Hyperthreading enabled, the vCPU count is restricted to be 1 or an even number, otherwise there are no restrictions regarding the vCPU count. If any of the parameters has an incorrect value, the whole update fails.",
        "operationId": "putMachineConfiguration",
        "requestBody": {
          "description": "Machine Configuration Parameters",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MachineConfiguration"
              }
            }
          },
          "required": false
        },
        "responses": {
          "204": {
            "description": "Machine Configuration created/updated",
            "content": {}
          },
          "400": {
            "description": "Machine Configuration cannot be updated due to bad input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "patch": {
        "summary": "Partially updates the Machine Configuration of the VM. Pre-boot only.",
        "description": "Partially updates the Virtual Machine Configuration with the specified input. If any of the parameters has an incorrect value, the whole update fails.",
        "operationId": "patchMachineConfiguration",
        "requestBody": {
          "description": "A subset of Machine Configuration Parameters",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MachineConfiguration"
              }
            }
          },
          "required": false
        },
        "responses": {
          "204": {
            "description": "Machine Configuration created/updated",
            "content": {}
          },
          "400": {
            "description": "Machine Configuration cannot be updated due to bad input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/metrics": {
      "put": {
        "summary": "Initializes the metrics system by specifying a named pipe or a file for the metrics output.",
        "operationId": "putMetrics",
        "requestBody": {
          "description": "Metrics system description",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Metrics"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Metrics system created.",
            "content": {}
          },
          "400": {
            "description": "Metrics system cannot be initialized due to bad input.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/mmds": {
      "get": {
        "summary": "Get the MMDS data store.",
        "responses": {
          "200": {
            "description": "The MMDS data store JSON.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "The MMDS data store content can not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Creates a MMDS (Microvm Metadata Service) data store.",
        "requestBody": {
          "description": "The MMDS data store as JSON.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "204": {
            "description": "MMDS data store created/updated.",
            "content": {}
          },
          "400": {
            "description": "MMDS data store cannot be created due to bad input.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "patch": {
        "summary": "Updates the MMDS data store.",
        "requestBody": {
          "description": "The MMDS data store patch JSON.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "204": {
            "description": "MMDS data store updated.",
            "content": {}
          },
          "400": {
            "description": "MMDS data store cannot be updated due to bad input.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/mmds/config": {
      "put": {
        "summary": "Set MMDS configuration. Pre-boot only.",
        "description": "Creates MMDS configuration to be used by the MMDS network stack.",
        "requestBody": {
          "description": "The MMDS configuration as JSON.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MmdsConfig"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "MMDS configuration was created/updated.",
            "content": {}
          },
          "400": {
            "description": "MMDS configuration cannot be updated due to bad input.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/network-interfaces/{iface_id}": {
      "put": {
        "summary": "Creates a network interface. Pre-boot only.",
        "description": "Creates new network interface with ID specified by iface_id path parameter.",
        "operationId": "putGuestNetworkInterfaceByID",
        "parameters": [
          {
            "name": "iface_id",
            "in": "path",
            "description": "The id of the guest network interface",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Guest network interface properties",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NetworkInterface"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Network interface created/updated",
            "content": {}
          },
          "400": {
            "description": "Network interface cannot be created due to bad input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "patch": {
        "summary": "Updates the rate limiters applied to a network interface. Post-boot only.",
        "description": "Updates the rate limiters applied to a network interface.",
        "operationId": "patchGuestNetworkInterfaceByID",
        "parameters": [
          {
            "name": "iface_id",
            "in": "path",
            "description": "The id of the guest network interface",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A subset of the guest network interface properties",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartialNetworkInterface"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Network interface updated",
            "content": {}
          },
          "400": {
            "description": "Network interface cannot be updated due to bad input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/snapshot/create": {
      "put": {
        "summary": "Creates a full or diff snapshot. Post-boot only.",
        "description": "Creates a snapshot of the microVM state. The microVM should be in the `Paused` state.",
        "operationId": "createSnapshot",
        "requestBody": {
          "description": "The configuration used for creating a snaphot.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SnapshotCreateParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Snapshot created",
            "content": {}
          },
          "400": {
            "description": "Snapshot cannot be created due to bad input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/snapshot/load": {
      "put": {
        "summary": "Loads a snapshot. Pre-boot only.",
        "description": "Loads the microVM state from a snapshot. Only accepted on a fresh Firecracker process (before configuring any resource other than the Logger and Metrics).",
        "operationId": "loadSnapshot",
        "requestBody": {
          "description": "The configuration used for loading a snaphot.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SnapshotLoadParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Snapshot loaded",
            "content": {}
          },
          "400": {
            "description": "Snapshot cannot be loaded due to bad input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/vm": {
      "patch": {
        "summary": "Updates the microVM state.",
        "description": "Sets the desired state (Paused or Resumed) for the microVM.",
        "operationId": "patchVm",
        "requestBody": {
          "description": "The microVM state",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Vm"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Vm state updated",
            "content": {}
          },
          "400": {
            "description": "Vm state cannot be updated due to bad input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/vm/config": {
      "get": {
        "summary": "Gets the full VM configuration.",
        "description": "Gets configuration for all VM resources.",
        "operationId": "getExportVmConfig",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FullVmConfiguration"
                }
              }
            }
          },
          "default": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/vsock": {
      "put": {
        "summary": "Creates/updates a vsock device. Pre-boot only.",
        "description": "The first call creates the device with the configuration specified in body. Subsequent calls will update the device configuration. May fail if update is not possible.",
        "operationId": "putGuestVsock",
        "requestBody": {
          "description": "Guest vsock properties",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Vsock"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Vsock created/updated",
            "content": {}
          },
          "400": {
            "description": "Vsock cannot be created due to bad input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    }
  },
  "components": {
    "schemas": {
      "Balloon": {
        "required": [
          "amount_mib",
          "deflate_on_oom"
        ],
        "type": "object",
        "properties": {
          "amount_mib": {
            "type": "integer",
            "description": "Target balloon size in MiB."
          },
          "deflate_on_oom": {
            "type": "boolean",
            "description": "Whether the balloon should deflate when the guest has memory pressure."
          },
          "stats_polling_interval_s": {
            "type": "integer",
            "description": "Interval in seconds between refreshing statistics. A non-zero value will enable the statistics. Defaults to 0."
          }
        },
        "description": "Balloon device descriptor."
      },
      "BalloonUpdate": {
        "required": [
          "amount_mib"
        ],
        "type": "object",
        "properties": {
          "amount_mib": {
            "type": "integer",
            "description": "Target balloon size in MiB."
          }
        },
        "description": "Balloon device descriptor."
      },
      "BalloonStats": {
        "required": [
          "actual_mib",
          "actual_pages",
          "target_mib",
          "target_pages"
        ],
        "type": "object",
        "properties": {
          "target_pages": {
            "type": "integer",
            "description": "Target number of pages the device aims to hold."
          },
          "actual_pages": {
            "type": "integer",
            "description": "Actual number of pages the device is holding."
          },
          "target_mib": {
            "type": "integer",
            "description": "Target amount of memory (in MiB) the device aims to hold."
          },
          "actual_mib": {
            "type": "integer",
            "description": "Actual amount of memory (in MiB) the device is holding."
          },
          "swap_in": {
            "type": "integer",
            "description": "The amount of memory that has been swapped in (in bytes).",
            "format": "int64"
          },
          "swap_out": {
            "type": "integer",
            "description": "The amount of memory that has been swapped out to disk (in bytes).",
            "format": "int64"
          },
          "major_faults": {
            "type": "integer",
            "description": "The number of major page faults that have occurred.",
            "format": "int64"
          },
          "minor_faults": {
            "type": "integer",
            "description": "The number of minor page faults that have occurred.",
            "format": "int64"
          },
          "free_memory": {
            "type": "integer",
            "description": "The amount of memory not being used for any purpose (in bytes).",
            "format": "int64"
          },
          "total_memory": {
            "type": "integer",
            "description": "The total amount of memory available (in bytes).",
            "format": "int64"
          },
          "available_memory": {
            "type": "integer",
            "description": "An estimate of how much memory is available (in bytes) for starting new applications, without pushing the system to swap.",
            "format": "int64"
          },
          "disk_caches": {
            "type": "integer",
            "description": "The amount of memory, in bytes, that can be quickly reclaimed without additional I/O. Typically these pages are used for caching files from disk.",
            "format": "int64"
          },
          "hugetlb_allocations": {
            "type": "integer",
            "description": "The number of successful hugetlb page allocations in the guest.",
            "format": "int64"
          },
          "hugetlb_failures": {
            "type": "integer",
            "description": "The number of failed hugetlb page allocations in the guest.",
            "format": "int64"
          }
        },
        "description": "Describes the balloon device statistics."
      },
      "BalloonStatsUpdate": {
        "required": [
          "stats_polling_interval_s"
        ],
        "type": "object",
        "properties": {
          "stats_polling_interval_s": {
            "type": "integer",
            "description": "Interval in seconds between refreshing statistics."
          }
        },
        "description": "Update the statistics polling interval, with the first statistics update scheduled immediately. Statistics cannot be turned on/off after boot."
      },
      "BootSource": {
        "required": [
          "kernel_image_path"
        ],
        "type": "object",
        "properties": {
          "boot_args": {
            "type": "string",
            "description": "Kernel boot arguments"
          },
          "initrd_path": {
            "type": "string",
            "description": "Host level path to the initrd image used to boot the guest"
          },
          "kernel_image_path": {
            "type": "string",
            "description": "Host level path to the kernel image used to boot the guest"
          }
        },
        "description": "Boot source descriptor."
      },
      "CpuTemplate": {
        "type": "string",
        "description": "The CPU Template defines a set of flags to be disabled from the microvm so that the features exposed to the guest are the same as in the selected instance type.",
        "enum": [
          "C3",
          "T2"
        ]
      },
      "Drive": {
        "required": [
          "drive_id",
          "is_read_only",
          "is_root_device",
          "path_on_host"
        ],
        "type": "object",
        "properties": {
          "drive_id": {
            "type": "string"
          },
          "cache_type": {
            "type": "string",
            "description": "Represents the caching strategy for the block device.",
            "default": "Unsafe"
          },
          "is_read_only": {
            "type": "boolean"
          },
          "is_root_device": {
            "type": "boolean"
          },
          "partuuid": {
            "type": "string",
            "description": "Represents the unique id of the boot partition of this device. It is optional and it will be taken into account only if the is_root_device field is true."
          },
          "path_on_host": {
            "type": "string",
            "description": "Host level path for the guest drive"
          },
          "rate_limiter": {
            "$ref": "#/components/schemas/RateLimiter"
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "fault_message": {
            "type": "string",
            "description": "A description of the error condition",
            "readOnly": true
          }
        }
      },
      "FullVmConfiguration": {
        "type": "object",
        "properties": {
          "balloon_device": {
            "$ref": "#/components/schemas/Balloon"
          },
          "block_devices": {
            "type": "array",
            "description": "Configurations for all block devices.",
            "items": {
              "$ref": "#/components/schemas/Drive"
            }
          },
          "boot_source": {
            "$ref": "#/components/schemas/BootSource"
          },
          "logger": {
            "$ref": "#/components/schemas/Logger"
          },
          "machine_config": {
            "$ref": "#/components/schemas/MachineConfiguration"
          },
          "metrics": {
            "$ref": "#/components/schemas/Metrics"
          },
          "mmds_config": {
            "$ref": "#/components/schemas/MmdsConfig"
          },
          "net_devices": {
            "type": "array",
            "description": "Configurations for all net devices.",
            "items": {
              "$ref": "#/components/schemas/NetworkInterface"
            }
          },
          "vsock_device": {
            "$ref": "#/components/schemas/Vsock"
          }
        }
      },
      "InstanceActionInfo": {
        "required": [
          "action_type"
        ],
        "type": "object",
        "properties": {
          "action_type": {
            "type": "string",
            "description": "Enumeration indicating what type of action is contained in the payload",
            "enum": [
              "FlushMetrics",
              "InstanceStart",
              "SendCtrlAltDel"
            ]
          }
        },
        "description": "Variant wrapper containing the real action."
      },
      "InstanceInfo": {
        "required": [
          "app_name",
          "id",
          "state",
          "vmm_version"
        ],
        "type": "object",
        "properties": {
          "app_name": {
            "type": "string",
            "description": "Application name."
          },
          "id": {
            "type": "string",
            "description": "MicroVM / instance ID."
          },
          "state": {
            "type": "string",
            "description": "The current detailed state (Not started, Running, Paused) of the Firecracker instance. This value is read-only for the control-plane.",
            "enum": [
              "Not started",
              "Running",
              "Paused"
            ]
          },
          "vmm_version": {
            "type": "string",
            "description": "MicroVM hypervisor build version."
          }
        },
        "description": "Describes MicroVM instance information."
      },
      "Logger": {
        "required": [
          "log_path"
        ],
        "type": "object",
        "properties": {
          "level": {
            "type": "string",
            "description": "Set the level. The possible values are case-insensitive.",
            "default": "Warning",
            "enum": [
              "Error",
              "Warning",
              "Info",
              "Debug"
            ]
          },
          "log_path": {
            "type": "string",
            "description": "Path to the named pipe or file for the human readable log output."
          },
          "show_level": {
            "type": "boolean",
            "description": "Whether or not to output the level in the logs.",
            "default": false
          },
          "show_log_origin": {
            "type": "boolean",
            "description": "Whether or not to include the file path and line number of the log's origin.",
            "default": false
          }
        },
        "description": "Describes the configuration option for the logging capability."
      },
      "MachineConfiguration": {
        "required": [
          "ht_enabled",
          "mem_size_mib",
          "vcpu_count"
        ],
        "type": "object",
        "properties": {
          "cpu_template": {
            "$ref": "#/components/schemas/CpuTemplate"
          },
          "ht_enabled": {
            "type": "boolean",
            "description": "Flag for enabling/disabling Hyperthreading"
          },
          "mem_size_mib": {
            "type": "integer",
            "description": "Memory size of VM"
          },
          "track_dirty_pages": {
            "type": "boolean",
            "description": "Enable dirty page tracking. If this is enabled, then incremental guest memory snapshots can be created. These belong to diff snapshots, which contain, besides the microVM state, only the memory dirtied since a previous snapshot. Full snapshots each contain a full copy of the guest memory."
          },
          "vcpu_count": {
            "maximum": 32,
            "minimum": 1,
            "type": "integer",
            "description": "Number of vCPUs (either 1 or an even number)"
          }
        },
        "description": "Describes the number of vCPUs, memory size, Hyperthreading capabilities and the CPU template."
      },
      "Metrics": {
        "required": [
          "metrics_path"
        ],
        "type": "object",
        "properties": {
          "metrics_path": {
            "type": "string",
            "description": "Path to the named pipe or file where the JSON-formatted metrics are flushed."
          }
        },
        "description": "Describes the configuration option for the metrics capability."
      },
      "MmdsConfig": {
        "type": "object",
        "properties": {
          "ipv4_address": {
            "type": "string",
            "description": "A valid IPv4 link-local address.",
            "format": "169.254.([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-4]).([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])",
            "default": "169.254.169.254"
          }
        },
        "description": "Defines the MMDS configuration."
      },
      "NetworkInterface": {
        "required": [
          "host_dev_name",
          "iface_id"
        ],
        "type": "object",
        "properties": {
          "allow_mmds_requests": {
            "type": "boolean",
            "description": "If this field is set, the device model will reply to HTTP GET requests sent to the MMDS address via this interface. In this case, both ARP requests for 169.254.169.254 and TCP segments heading to the same address are intercepted by the device model, and do not reach the associated TAP device."
          },
          "guest_mac": {
            "type": "string"
          },
          "host_dev_name": {
            "type": "string",
            "description": "Host level path for the guest network interface"
          },
          "iface_id": {
            "type": "string"
          },
          "rx_rate_limiter": {
            "$ref": "#/components/schemas/RateLimiter"
          },
          "tx_rate_limiter": {
            "$ref": "#/components/schemas/RateLimiter"
          }
        },
        "description": "Defines a network interface."
      },
      "PartialDrive": {
        "required": [
          "drive_id"
        ],
        "type": "object",
        "properties": {
          "drive_id": {
            "type": "string"
          },
          "path_on_host": {
            "type": "string",
            "description": "Host level path for the guest drive"
          },
          "rate_limiter": {
            "$ref": "#/components/schemas/RateLimiter"
          }
        }
      },
      "PartialNetworkInterface": {
        "required": [
          "iface_id"
        ],
        "type": "object",
        "properties": {
          "iface_id": {
            "type": "string"
          },
          "rx_rate_limiter": {
            "$ref": "#/components/schemas/RateLimiter"
          },
          "tx_rate_limiter": {
            "$ref": "#/components/schemas/RateLimiter"
          }
        },
        "description": "Defines a partial network interface structure, used to update the rate limiters for that interface, after microvm start."
      },
      "RateLimiter": {
        "type": "object",
        "properties": {
          "bandwidth": {
            "$ref": "#/components/schemas/TokenBucket"
          },
          "ops": {
            "$ref": "#/components/schemas/TokenBucket"
          }
        },
        "description": "Defines an IO rate limiter with independent bytes/s and ops/s limits. Limits are defined by configuring each of the _bandwidth_ and _ops_ token buckets."
      },
      "SnapshotCreateParams": {
        "required": [
          "mem_file_path",
          "snapshot_path"
        ],
        "type": "object",
        "properties": {
          "mem_file_path": {
            "type": "string",
            "description": "Path to the file that will contain the guest memory."
          },
          "snapshot_path": {
            "type": "string",
            "description": "Path to the file that will contain the microVM state."
          },
          "snapshot_type": {
            "type": "string",
            "description": "Type of snapshot to create. It is optional and by default, a full snapshot is created.",
            "enum": [
              "Full",
              "Diff"
            ]
          },
          "version": {
            "type": "string",
            "description": "The microVM version for which we want to create the snapshot. It is optional and it defaults to the current version."
          }
        }
      },
      "SnapshotLoadParams": {
        "required": [
          "mem_file_path",
          "snapshot_path"
        ],
        "type": "object",
        "properties": {
          "enable_diff_snapshots": {
            "type": "boolean",
            "description": "Enable support for incremental (diff) snapshots by tracking dirty guest pages."
          },
          "mem_file_path": {
            "type": "string",
            "description": "Path to the file that contains the guest memory to be loaded."
          },
          "snapshot_path": {
            "type": "string",
            "description": "Path to the file that contains the microVM state to be loaded."
          },
          "resume_vm": {
            "type": "boolean",
            "description": "When set to true, the vm is also resumed if the snapshot load is successful."
          }
        }
      },
      "TokenBucket": {
        "required": [
          "refill_time",
          "size"
        ],
        "type": "object",
        "properties": {
          "one_time_burst": {
            "minimum": 0,
            "type": "integer",
            "description": "The initial size of a token bucket.",
            "format": "int64"
          },
          "refill_time": {
            "minimum": 0,
            "type": "integer",
            "description": "The amount of milliseconds it takes for the bucket to refill.",
            "format": "int64"
          },
          "size": {
            "minimum": 0,
            "type": "integer",
            "description": "The total number of tokens this bucket can hold.",
            "format": "int64"
          }
        },
        "description": "Defines a token bucket with a maximum capacity (size), an initial burst size (one_time_burst) and an interval for refilling purposes (refill_time). The refill-rate is derived from size and refill_time, and it is the constant rate at which the tokens replenish. The refill process only starts happening after the initial burst budget is consumed. Consumption from the token bucket is unbounded in speed which allows for bursts bound in size by the amount of tokens available. Once the token bucket is empty, consumption speed is bound by the refill_rate."
      },
      "Vm": {
        "required": [
          "state"
        ],
        "type": "object",
        "properties": {
          "state": {
            "type": "string",
            "enum": [
              "Paused",
              "Resumed"
            ]
          }
        },
        "description": "Defines the microVM running state. It is especially useful in the snapshotting context."
      },
      "Vsock": {
        "required": [
          "guest_cid",
          "uds_path",
          "vsock_id"
        ],
        "type": "object",
        "properties": {
          "guest_cid": {
            "minimum": 3,
            "type": "integer",
            "description": "Guest Vsock CID"
          },
          "uds_path": {
            "type": "string",
            "description": "Path to UNIX domain socket, used to proxy vsock connections."
          },
          "vsock_id": {
            "type": "string"
          }
        },
        "description": "Defines a vsock device, backed by a set of Unix Domain Sockets, on the host side. For host-initiated connections, Firecracker will be listening on the Unix socket identified by the path `uds_path`. Firecracker will create this socket, bind and listen on it. Host-initiated connections will be performed by connection to this socket and issuing a connection forwarding request to the desired guest-side vsock port (i.e. `CONNECT 52\\n`, to connect to port 52). For guest-initiated connections, Firecracker will expect host software to be bound and listening on Unix sockets at `uds_path_<PORT>`. E.g. \"/path/to/host_vsock.sock_52\" for port number 52."
      }
    }
  }
}
