{
  "openapi": "3.0.1",
  "info": {
    "title": "TechEmpower",
    "description": "API for TechEmpower benchmarks",
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "contact": {
      "url": "https://github.com/TechEmpower/FrameworkBenchmarks/wiki/Project-Information-Framework-Tests-Overview#test-types"
    },
    "version": "20"
  },
  "servers": [
    {
      "url": "http://localhost/"
    }
  ],
  "paths": {
    "/json": {
      "get": {
        "summary": "Test #1. The JSON Serialization test exercises the framework fundamentals including keep-alive support, request routing, request header parsing, object instantiation, JSON serialization, response header generation, and request count throughput.",
        "externalDocs": {
          "url": "https://github.com/TechEmpower/FrameworkBenchmarks/wiki/Project-Information-Framework-Tests-Overview#json-serialization"
        },
        "operationId": "json",
        "responses": {
          "200": {
            "description": "Hello world message",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HelloWorld"
                }
              }
            }
          }
        }
      }
    },
    "/db": {
      "get": {
        "summary": "Test #2. The Single Database Query test exercises the framework's object-relational mapper (ORM), random number generator, database driver, and database connection pool.",
        "externalDocs": {
          "url": "https://github.com/TechEmpower/FrameworkBenchmarks/wiki/Project-Information-Framework-Tests-Overview#single-database-query"
        },
        "operationId": "DB",
        "responses": {
          "200": {
            "description": "World object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorldObject"
                }
              }
            }
          }
        }
      }
    },
    "/queries": {
      "get": {
        "summary": "Test #3. The Multiple Database Queries test is a variation of Test #2 and also uses the World table. Multiple rows are fetched to more dramatically punish the database driver and connection pool. At the highest queries-per-request tested (20), this test demonstrates all frameworks' convergence toward zero requests-per-second as database activity increases.",
        "externalDocs": {
          "url": "https://github.com/TechEmpower/FrameworkBenchmarks/wiki/Project-Information-Framework-Tests-Overview#multiple-database-queries"
        },
        "operationId": "Queries",
        "parameters": [
          {
            "name": "queries",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of World objects",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorldObjects"
                }
              }
            }
          }
        }
      }
    },
    "/updates": {
      "get": {
        "operationId": "Updates",
        "summary": "Test #5. The Database Updates test is a variation of Test #3 that exercises the ORM's persistence of objects and the database driver's performance at running UPDATE statements or similar. The spirit of this test is to exercise a variable number of read-then-write style database operations.",
        "externalDocs": {
          "url": "https://github.com/TechEmpower/FrameworkBenchmarks/wiki/Project-Information-Framework-Tests-Overview#database-updates"
        },
        "parameters": [
          {
            "name": "queries",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of World objects",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorldObjects"
                }
              }
            }
          }
        }
      }
    },
    "/cached-worlds": {
      "get": {
        "operationId": "Caching",
        "summary": "Test #7. The Caching test exercises the preferred in-memory or separate-process caching technology for the platform or framework. For implementation simplicity, the requirements are very similar to the multiple database-query test Test #3, but use a separate database table. The requirements are quite generous, affording each framework fairly broad freedom to meet the requirements in the manner that best represents the canonical non-distributed caching approach for the framework. (Note: a distributed caching test type could be added later.)",
        "externalDocs": {
          "url": "https://github.com/TechEmpower/FrameworkBenchmarks/wiki/Project-Information-Framework-Tests-Overview#caching"
        },
        "parameters": [
          {
            "name": "count",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of CachedWorld objects",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorldObjects"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "HelloWorld": {
        "type": "object",
        "required": [
          "message"
        ],
        "properties": {
          "message": {
            "type": "string",
            "default": "Hello, World!",
            "description": "Should be equal to 'Hello, World!'"
          }
        }
      },
      "WorldObject": {
        "type": "object",
        "required": [
          "id",
          "randomNumber"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "randomNumber": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "WorldObjects": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/WorldObject"
        }
      }
    }
  }
}
