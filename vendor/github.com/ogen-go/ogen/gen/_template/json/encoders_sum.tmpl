{{- /*gotype: github.com/ogen-go/ogen/gen/ir.Type*/ -}}
{{- define "json/encoders_sum" }}{{ $d := $.JSON.Sum -}}
// Encode encodes {{ $.Name }} as json.
func (s {{ $.ReadOnlyReceiver }}) Encode(e *jx.Encoder) {
	{{- if $d.Discriminator -}}
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
	{{- else }}
	switch s.Type {
	{{- range $s := $.SumOf }}
	case {{ $s.Name }}{{ $.Name }}:
		{{- template "json/enc" elem $s (printf "s.%s" $s.Name) -}}
	{{- end }}
	}
    {{- end }}
}

{{ if or $d.Discriminator $d.Fields -}}
func (s {{ $.ReadOnlyReceiver }}) encodeFields(e *jx.Encoder) {
	{{- if $d.Discriminator -}}
		switch s.Type {
		{{- range $m := $.SumSpec.Mapping }}
		case {{ $m.Type.Name }}{{ $.Name }}:
			e.FieldStart({{ quote $.SumSpec.Discriminator }})
			e.Str({{ quote $m.Key }})
			s.{{ $m.Type.Name }}.encodeFields(e)
		{{- end }}
		}
	{{- else if $d.Fields }}
		switch s.Type {
		{{- range $s := $.SumOf }}
		case {{ $s.Name }}{{ $.Name }}:
			s.{{ $s.Name }}.encodeFields(e)
		{{- end }}
		}
	{{- else }}
		{{ errorf "unexpected sum type %s" $d }}
	{{- end }}
}
{{- end }}

// Decode decodes {{ $.Name }} from json.
func (s *{{ $.Name }}) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New({{ printf "invalid: unable to decode %s to nil" $.Name | quote }})
	}
	// Sum type {{ $d }}.
	{{- if or ($d.Primitive) ($d.TypeDiscriminator) }}
	switch t := d.Next(); t {
	{{- range $cse := $.TypeDiscriminator }}
	case {{ $cse.JXTypes }}:
		{{- with $intType := $cse.IntType }}
		num, err := d.Num()
		if err != nil {
			return errors.Wrap(err, "parse number")
		}
		if d := jx.DecodeBytes(num); num.IsInt() {
			{{- $s := $intType }}
			{{- template "json/dec" elem $s (printf "s.%s" $s.Name) }}
			s.Type = {{ $s.Name }}{{ $.Name }}
		} else {
        	{{- $s = $cse.Type }}
        	{{- template "json/dec" elem $s (printf "s.%s" $s.Name) }}
			s.Type = {{ $s.Name }}{{ $.Name }}
		}
		{{- else }}
			{{- $s := $cse.Type }}
			{{- template "json/dec" elem $s (printf "s.%s" $s.Name) }}
			s.Type = {{ $s.Name }}{{ $.Name }}
		{{- end }}
	{{- end }}
	default:
		return errors.Errorf("unexpected json type %q", t)
	}
	{{- else if or ($d.Fields) ($d.Discriminator) }}
	if typ := d.Next(); typ != jx.Object {
		return errors.Errorf("unexpected json type %q", typ)
	}

	var found bool
	if err := d.Capture(func(d *jx.Decoder) error {
		return d.ObjBytes(func(d *jx.Decoder, key []byte) error {
    		{{- if $d.Discriminator -}}
			if found {
				return d.Skip()
			}
			{{- end }}
			switch string(key) {
			{{- if $d.Discriminator -}}
			case {{ quote $.SumSpec.Discriminator }}:
				typ, err := d.Str()
				if err != nil {
					return err
				}
				switch typ {
				{{- range $m:= $.SumSpec.Mapping }}
				case {{ quote $m.Key }}:
					s.Type = {{ $m.Type.Name }}{{ $.Name }}
					found = true
				{{- end }}
				default:
					return errors.Errorf("unknown type %s", typ)
				}
				return nil
			{{- else }}
			{{- range $s := $.SumOf }}
			{{- range $f := $s.SumSpec.Unique }}
			case {{ quote $f.Tag.JSON }}:
				match := {{ $s.Name }}{{ $.Name }}
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			{{- end }}
			{{- end }}
			{{- end }}
			}
			return d.Skip()
		})
	}); err != nil {
		return errors.Wrap(err, "capture")
	}
	if !found {
		{{- if $.SumSpec.DefaultMapping }}
		s.Type = {{ $.SumSpec.DefaultMapping }}{{ $.Name }}
		{{- else }}
		return errors.New("unable to detect sum type variant")
		{{- end }}
	}
	switch s.Type {
	{{- range $s := $.SumOf }}
	case {{ $s.Name }}{{ $.Name }}:
		{{- template "json/dec" elem $s (printf "s.%s" $s.Name) }}
	{{- end }}
	default:
		return errors.Errorf("inferred invalid type: %s", s.Type)
	}
	{{- end }}
	return nil
}

{{ end }}
