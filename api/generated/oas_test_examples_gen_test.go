// Code generated by ogen, DO NOT EDIT.

package generated

import (
	"github.com/go-faster/jx"

	std "encoding/json"
	"testing"

	"github.com/stretchr/testify/require"
)

func TestError5xx_EncodeDecode(t *testing.T) {
	var typ Error5xx
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 Error5xx
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestError5xxAdditional_EncodeDecode(t *testing.T) {
	var typ Error5xxAdditional
	typ = make(Error5xxAdditional)
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 Error5xxAdditional
	typ2 = make(Error5xxAdditional)
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestError5xxAdditionalItem_EncodeDecode(t *testing.T) {
	var typ Error5xxAdditionalItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 Error5xxAdditionalItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestErrorGeneric_EncodeDecode(t *testing.T) {
	var typ ErrorGeneric
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ErrorGeneric
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestErrorGenericAdditional_EncodeDecode(t *testing.T) {
	var typ ErrorGenericAdditional
	typ = make(ErrorGenericAdditional)
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ErrorGenericAdditional
	typ2 = make(ErrorGenericAdditional)
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestErrorGenericAdditionalItem_EncodeDecode(t *testing.T) {
	var typ ErrorGenericAdditionalItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ErrorGenericAdditionalItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetUserApplicationJSONBadRequest_EncodeDecode(t *testing.T) {
	var typ GetUserApplicationJSONBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetUserApplicationJSONBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetUserApplicationJSONNotFound_EncodeDecode(t *testing.T) {
	var typ GetUserApplicationJSONNotFound
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetUserApplicationJSONNotFound
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetUserApplicationJSONUnauthorized_EncodeDecode(t *testing.T) {
	var typ GetUserApplicationJSONUnauthorized
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetUserApplicationJSONUnauthorized
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestLoginInput_EncodeDecode(t *testing.T) {
	var typ LoginInput
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 LoginInput
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestLoginResponse_EncodeDecode(t *testing.T) {
	var typ LoginResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 LoginResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestLoginUserApplicationJSONBadRequest_EncodeDecode(t *testing.T) {
	var typ LoginUserApplicationJSONBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 LoginUserApplicationJSONBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestLoginUserApplicationJSONNotFound_EncodeDecode(t *testing.T) {
	var typ LoginUserApplicationJSONNotFound
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 LoginUserApplicationJSONNotFound
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUser_EncodeDecode(t *testing.T) {
	var typ User
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 User
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUserRegister_EncodeDecode(t *testing.T) {
	var typ UserRegister
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UserRegister
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUserRegisterResponse_EncodeDecode(t *testing.T) {
	var typ UserRegisterResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UserRegisterResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
