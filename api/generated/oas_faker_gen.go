// Code generated by ogen, DO NOT EDIT.

package generated

import (
	"fmt"
)

// SetFake set fake values.
func (s *Error5xx) SetFake() {
	{
		{
			s.Code = int(0)
		}
	}
	{
		{
			s.Message = "string"
		}
	}
	{
		{
			s.RequestID.SetFake()
		}
	}
	{
		{
			s.AdditionalProps.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *Error5xxAdditional) SetFake() {
	var (
		elem Error5xxAdditionalItem
		m    map[string]Error5xxAdditionalItem = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *Error5xxAdditionalItem) SetFake() {
}

// SetFake set fake values.
func (s *ErrorGeneric) SetFake() {
	{
		{
			s.Code = int(0)
		}
	}
	{
		{
			s.Message = "string"
		}
	}
	{
		{
			s.RequestID.SetFake()
		}
	}
	{
		{
			s.AdditionalProps.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ErrorGenericAdditional) SetFake() {
	var (
		elem ErrorGenericAdditionalItem
		m    map[string]ErrorGenericAdditionalItem = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *ErrorGenericAdditionalItem) SetFake() {
}

// SetFake set fake values.
func (s *GetUserBadRequest) SetFake() {
	var unwrapped ErrorGeneric
	{
		unwrapped.SetFake()
	}
	*s = GetUserBadRequest(unwrapped)
}

// SetFake set fake values.
func (s *GetUserNotFound) SetFake() {
	var unwrapped ErrorGeneric
	{
		unwrapped.SetFake()
	}
	*s = GetUserNotFound(unwrapped)
}

// SetFake set fake values.
func (s *GetUserUnauthorized) SetFake() {
	var unwrapped ErrorGeneric
	{
		unwrapped.SetFake()
	}
	*s = GetUserUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *LoginInput) SetFake() {
	{
		{
			s.ID = int64(0)
		}
	}
	{
		{
			s.Password = "string"
		}
	}
}

// SetFake set fake values.
func (s *LoginResponse) SetFake() {
	{
		{
			s.Token = "string"
		}
	}
}

// SetFake set fake values.
func (s *LoginUserBadRequest) SetFake() {
	var unwrapped ErrorGeneric
	{
		unwrapped.SetFake()
	}
	*s = LoginUserBadRequest(unwrapped)
}

// SetFake set fake values.
func (s *LoginUserNotFound) SetFake() {
	var unwrapped ErrorGeneric
	{
		unwrapped.SetFake()
	}
	*s = LoginUserNotFound(unwrapped)
}

// SetFake set fake values.
func (s *OptInt32) SetFake() {
	var elem int32
	{
		elem = int32(0)
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptString) SetFake() {
	var elem string
	{
		elem = "string"
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *User) SetFake() {
	{
		{
			s.ID = int64(0)
		}
	}
	{
		{
			s.FirstName = "string"
		}
	}
	{
		{
			s.SecondName = "string"
		}
	}
	{
		{
			s.Age = int32(0)
		}
	}
	{
		{
			s.Biography = "string"
		}
	}
	{
		{
			s.City = "string"
		}
	}
}

// SetFake set fake values.
func (s *UserRegister) SetFake() {
	{
		{
			s.FirstName = "string"
		}
	}
	{
		{
			s.SecondName = "string"
		}
	}
	{
		{
			s.Age.SetFake()
		}
	}
	{
		{
			s.Biography.SetFake()
		}
	}
	{
		{
			s.City.SetFake()
		}
	}
	{
		{
			s.Password = "string"
		}
	}
}

// SetFake set fake values.
func (s *UserRegisterResponse) SetFake() {
	{
		{
			s.UserID = int64(0)
		}
	}
}

// SetFake set fake values.
func (s *Users) SetFake() {
	var unwrapped []User
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem User
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = Users(unwrapped)
}
